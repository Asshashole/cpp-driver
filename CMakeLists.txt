##
# Copyright (c) DataStax, Inc.
#
# This software can be used solely with DataStax Enterprise. Please consult the
# license at http://www.datastax.com/terms/datastax-dse-driver-license-terms
##

cmake_minimum_required(VERSION 2.6.4)
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Ensure functions/modules are available
set(CASS_ROOT_DIR "${CMAKE_SOURCE_DIR}/cpp-driver")
set(CASS_SRC_DIR "${CASS_ROOT_DIR}/src")
set(CASS_INCLUDE_DIR "${CASS_ROOT_DIR}/include")
list(APPEND CMAKE_MODULE_PATH ${CASS_ROOT_DIR}/cmake/modules
  ${CMAKE_SOURCE_DIR}/cmake/modules
)

include(CppDriver)
include(ClangFormat)

CassInitProject(dse)
CassRapidJson()
CassPolicies()
CassCheckPlatform()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#------------------------
# Project Version
#------------------------
CassProjectVersion("${PROJECT_SOURCE_DIR}/include/dse.h" "DSE")

#---------------
# Options
#---------------

option(DSE_BUILD_DOCS "Build documentation" OFF)
option(DSE_BUILD_EXAMPLES "Build examples" OFF)
option(DSE_BUILD_INTEGRATION_TESTS "Build the integration tests" OFF)
option(DSE_BUILD_SHARED "Build shared library" ON)
option(DSE_BUILD_STATIC "Build static library" OFF)
option(DSE_BUILD_TESTS "Build tests" OFF)
option(DSE_BUILD_UNIT_TESTS "Build the unit tests" OFF)
option(DSE_DEBUG_CUSTOM_ALLOC "Debug custom allocator" OFF)
option(DSE_INSTALL_HEADER "Install header file" ON)
option(DSE_INSTALL_PKG_CONFIG "Install pkg-config file(s)" ON)
option(DSE_MULTICORE_COMPILATION "Enable multicore compilation" ON)
option(DSE_USE_BOOST_ATOMIC "Use Boost atomics library" OFF)
option(DSE_USE_LIBSSH2 "Use libssh2" OFF)
option(DSE_USE_OPENSSL "Use OpenSSL" ON)
option(DSE_USE_SPARSEHASH "Use sparsehash" OFF)
option(DSE_USE_STATIC_LIBS "Link static libraries when building executables" OFF)
option(DSE_USE_STD_ATOMIC "Use C++11 atomics library" OFF)
option(DSE_USE_TCMALLOC "Use tcmalloc" OFF)
option(DSE_USE_ZLIB "Use zlib" OFF)
option(DSE_USE_TIMERFD "Use timerfd (Linux only)" ON)

# Handle testing dependencies
if(DSE_BUILD_TESTS)
  # Enable integration and unit tests
  set(DSE_BUILD_INTEGRATION_TESTS ON)
  set(DSE_BUILD_UNIT_TESTS ON)
endif()

if(DSE_BUILD_INTEGRATION_TESTS)
  # Enable integration tests for core driver
  set(CASS_BUILD_INTEGRATION_TESTS ON)
  set(DSE_USE_OPENSSL ON) # Required for integration tests
endif()

if(DSE_BUILD_UNIT_TESTS)
  # Enable unit tests for core driver
  set(CASS_BUILD_UNIT_TESTS ON)
endif()

if(DSE_BUILD_EXAMPLES)
  # Build examples for core driver
  set(CASS_BUILD_EXAMPLES ON)
endif()

# Determine which driver target should be used as a dependency
set(PROJECT_LIB_NAME_TARGET ${PROJECT_LIB_NAME})
if(DSE_USE_STATIC_LIBS)
  set(DSE_BUILD_STATIC ON)
  set(PROJECT_LIB_NAME_TARGET ${PROJECT_LIB_NAME_STATIC})
endif()
if(DSE_USE_STATIC_LIBS OR
   (WIN32 AND (CASS_BUILD_INTEGRATION_TESTS OR CASS_BUILD_UNIT_TESTS)))
  set(DSE_USE_STATIC_LIBS ON) # Not all driver internals are exported for test executable (e.g. DSE_EXPORT)
  set(DSE_BUILD_STATIC ON)
  set(PROJECT_LIB_NAME_TARGET ${PROJECT_LIB_NAME_STATIC})
endif()

# Set CASS options based on DSE options.
foreach(key USE_STATIC_LIBS USE_BOOST_ATOMIC USE_STD_ATOMIC USE_OPENSSL
            USE_TCMALLOC USE_SPARSEHASH USE_ZLIB USE_LIBSSH2 USE_TIMERFD
            DEBUG_CUSTOM_ALLOC MULTICORE_COMPILATION)
  set(CASS_${key} ${DSE_${key}})
endforeach()

#---------------
# Dependencies
#---------------
CassUseLibuv()

#------------------------
# Optional Dependencies
#------------------------
CassOptionalDependencies()

#----------------------
# Generating API docs
#----------------------
if(DSE_BUILD_DOCS)
  CassDoxygen()
endif()

CassSetCompilerFlags()
CassAddIncludes()
CassFindSourceFiles()
CassConfigure()

source_group("Source Files\\Cassandra" FILES ${CASS_SRC_FILES})
source_group("Header Files\\Cassandra" FILES ${CASS_API_HEADER_FILES} ${CASS_INC_FILES})

# Build up the include paths
set(PROJECT_INCLUDE_DIR ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/include)
set(DSE_INCLUDES ${PROJECT_INCLUDE_DIR})
set(DSE_INCLUDES ${DSE_INCLUDES} ${PROJECT_SOURCE_DIR}/src)
set(DSE_INCLUDES ${DSE_INCLUDES} ${CASS_INCLUDES})

# Build up libraries
set(DSE_LIBS ${CASS_LIBS})
if(WIN32)
  set(DSE_LIBS ${DSE_LIBS} version) # Required for GetFileVersionInfo/GetFileVersionSize usage
endif()

# Kerberos
find_package(Kerberos REQUIRED)
set(DSE_INCLUDES ${DSE_INCLUDES} ${KERBEROS_INCLUDE_DIR})
set(DSE_LIBS ${DSE_LIBS} ${KERBEROS_LIBRARIES})

#------------------------------
# DSE static and shared
#------------------------------

# Copy "cassandra.h"
configure_file(${CASS_ROOT_DIR}/include/cassandra.h
               ${PROJECT_SOURCE_DIR}/include/dse/cassandra.h
               COPYONLY)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})

file(GLOB DSE_API_HEADER_FILES ${PROJECT_SOURCE_DIR}/include/*.h)
file(GLOB DSE_INC_FILES ${PROJECT_SOURCE_DIR}/src/*.hpp)
file(GLOB DSE_SRC_FILES ${PROJECT_SOURCE_DIR}/src/*.cpp)

source_group("Source Files" FILES ${DSE_SRC_FILES})
source_group("Header Files" FILES ${DSE_API_HEADER_FILES} ${DSE_INC_FILES})
set(DSE_ALL_SOURCE_FILES
  ${DSE_SRC_FILES} ${DSE_API_HEADER_FILES}
  ${DSE_INC_FILES} ${CASS_ALL_SOURCE_FILES})

# Use the DSE driver's implementation of protocol handling and associated unit
# tests.
list(REMOVE_ITEM DSE_ALL_SOURCE_FILES
  "${PROJECT_SOURCE_DIR}/cpp-driver/src/driver_info.cpp"
  "${PROJECT_SOURCE_DIR}/cpp-driver/src/monitor_reporting.cpp"
  "${PROJECT_SOURCE_DIR}/cpp-driver/src/protocol.cpp")
set(CASS_EXCLUDED_UNIT_TEST_FILES "test_protocol_version.cpp")

# Assign the include directories
include_directories(${DSE_INCLUDES})
include_directories(${CASS_SRC_DIR})
include_directories(${CASS_INCLUDE_DIR})

# Additional project definitions
add_definitions(-DNOMINMAX)

# Determine if the dynamic/shared library should be built
if(DSE_BUILD_SHARED)
  # It would be great to move this logic into the CassConfigureShared
  # macro, but if you do, something goes wrong and the cmake output
  # warns that policy CMP0042 is violated.
  add_library(${PROJECT_LIB_NAME} SHARED ${DSE_ALL_SOURCE_FILES})
  if(LIBUV_LIBRARY_NAME)
    add_dependencies(${PROJECT_LIB_NAME} ${LIBUV_LIBRARY_NAME})
  endif()
  if(OPENSSL_LIBRARY_NAME)
    add_dependencies(${PROJECT_LIB_NAME} ${OPENSSL_LIBRARY_NAME})
  endif()
  CassConfigureShared("DSE")
  set_property(TARGET ${PROJECT_LIB_NAME} PROPERTY FOLDER "Driver/DSE")
endif()

# Determine if the static library should be built
if(DSE_BUILD_STATIC)
  # It would be great to move this logic into the CassConfigureStatic
  # macro, but if you do, something goes wrong and the cmake output
  # warns that policy CMP0042 is violated.
  add_library(${PROJECT_LIB_NAME_STATIC} STATIC ${DSE_ALL_SOURCE_FILES})
  if(LIBUV_LIBRARY_NAME)
    add_dependencies(${PROJECT_LIB_NAME_STATIC} ${LIBUV_LIBRARY_NAME})
  endif()
  if(OPENSSL_LIBRARY_NAME)
    add_dependencies(${PROJECT_LIB_NAME_STATIC} ${OPENSSL_LIBRARY_NAME})
  endif()
  CassConfigureStatic("DSE")

  set_property(TARGET ${PROJECT_LIB_NAME_STATIC} PROPERTY FOLDER "Driver/DSE")
endif()

#-----------------------------
# Unit and Integration Tests
#-----------------------------

CassConfigureTests(${CASS_ROOT_DIR})
if (DSE_BUILD_INTEGRATION_TESTS OR DSE_BUILD_UNIT_TESTS)
  add_subdirectory(tests)
endif()


#-----------
# Examples
#-----------

# Determine example directories at cmake execution time.
# When a new example dir is added, the user just runs cmake again to pull it in;
# no need to update CMakeLists.txt!

if(DSE_BUILD_EXAMPLES)
  CassBuildExamples("examples")
  CassBuildExamples("cpp-driver/examples")
endif()

#-------------------------------------
# Installation information
#-------------------------------------
CassConfigureInstall(DSE dse)

if(DSE_INSTALL_HEADER)
  install(DIRECTORY include/dse DESTINATION include FILES_MATCHING PATTERN "*.h")
endif()
